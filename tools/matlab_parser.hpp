#ifndef MATLAB_PARSER_HPP_
#define MATLAB_PARSER_HPP_

// This file was automatically generated by Caper.
// (http://jonigata.github.io/caper/caper.html)

#include <cstdlib>
#include <cassert>
#include <vector>

namespace matlab_parser {

enum Token {
    token_eof,
    token_Add,
    token_ArrayDiv,
    token_ArrayMul,
    token_ArrayPow,
    token_BitAnd,
    token_BitOr,
    token_Comma,
    token_Constant,
    token_Div,
    token_Eq,
    token_GE,
    token_GT,
    token_Identifier,
    token_LBracket,
    token_LE,
    token_LParen,
    token_LT,
    token_Mul,
    token_NCTrans,
    token_NEq,
    token_Pow,
    token_RBracket,
    token_RParen,
    token_Sub,
    token_Trans,
};

inline const char* token_label(Token t) {
    static const char* labels[] = {
        "token_eof",
        "token_Add",
        "token_ArrayDiv",
        "token_ArrayMul",
        "token_ArrayPow",
        "token_BitAnd",
        "token_BitOr",
        "token_Comma",
        "token_Constant",
        "token_Div",
        "token_Eq",
        "token_GE",
        "token_GT",
        "token_Identifier",
        "token_LBracket",
        "token_LE",
        "token_LParen",
        "token_LT",
        "token_Mul",
        "token_NCTrans",
        "token_NEq",
        "token_Pow",
        "token_RBracket",
        "token_RParen",
        "token_Sub",
        "token_Trans",
    };
    return labels[t];
}

template <class T, unsigned int StackSize>
class Stack {
public:
    Stack() { gap_ = 0; }

    void rollback_tmp() {
        gap_ = stack_.size();
        tmp_.clear();
    }

    void commit_tmp() {
        // may throw
        stack_.reserve(gap_ + tmp_.size());
	   
        // expect not to throw
        stack_.erase(stack_.begin()+ gap_, stack_.end());
        stack_.insert(stack_.end(), tmp_.begin(), tmp_.end());
        tmp_.clear();
    }
    bool push(const T& f) {
        if (StackSize != 0 &&
            int(StackSize) <= int(stack_.size() + tmp_.size())) {
            return false;
        }
        tmp_.push_back(f);
        return true;
    }
	   
    void pop(size_t n) {
        if (tmp_.size() < n) {
            n -= tmp_.size();
            tmp_.clear();
            gap_ -= n;
        } else {
            tmp_.erase(tmp_.end() - n, tmp_.end());
        }
    }

    T& top() {
        assert(0 < depth());
        if (!tmp_.empty()) {
            return tmp_.back();
        } else {
            return stack_[gap_ - 1];
        }
    }
	   
    const T& get_arg(size_t base, size_t index) {
        size_t n = tmp_.size();
        if (base - index <= n) {
            return tmp_[n - (base - index)];
        } else {
            return stack_[gap_ - (base - n) + index];
        }
    }
	   
    void clear() {
        stack_.clear();
        tmp_.clear();
        gap_ = 0; 
    }
	   
    bool empty() const {
        if (!tmp_.empty()) {
            return false;
        } else {
            return gap_ == 0;
        }
    }
	   
    size_t depth() const {
        return gap_ + tmp_.size();
    }
	   
    T& nth(size_t index) {
        if (gap_ <= index) {
            return tmp_[index - gap_];
        } else {
            return stack_[index];
        }
    }

    void swap_top_and_second() {
        int d = depth();
        assert(2 <= d);
        T x = nth(d - 1);
        nth(d - 1) = nth(d - 2);
        nth(d - 2) = x;
    }

private:
    std::vector<T> stack_;
    std::vector<T> tmp_;
    size_t gap_;
	   
};

template <class Value, class SemanticAction,
          unsigned int StackSize = 0>
class Parser {
public:
    typedef Token token_type;
    typedef Value value_type;

    enum Nonterminal {
        Nonterminal_AdditiveExpr,
        Nonterminal_AndExpr,
        Nonterminal_ArgExpr,
        Nonterminal_ArgListExpr,
        Nonterminal_CallExpr,
        Nonterminal_EqualityExpr,
        Nonterminal_Expr,
        Nonterminal_MultiplicativeExpr,
        Nonterminal_PostfixExpr,
        Nonterminal_PowExpr,
        Nonterminal_PrimaryExpr,
        Nonterminal_RelationalExpr,
        Nonterminal_UnaryExpr,
    };

public:
    Parser(SemanticAction& sa) : sa_(sa) { reset(); }

    void reset() {
        error_ = false;
        accepted_ = false;
        clear_stack();
        rollback_tmp_stack();
        if (push_stack(0, value_type())) {
            commit_tmp_stack();
        } else {
            sa_.stack_overflow();
            error_ = true;
        }
    }

    bool post(token_type token, const value_type& value) {
        rollback_tmp_stack();
        error_ = false;
        while ((this->*(stack_top()->entry->state))(token, value))
            ; // may throw
        if (!error_) {
            commit_tmp_stack();
        } else {
            recover(token, value);
        }
        return accepted_ || error_;
    }

    bool accept(value_type& v) {
        assert(accepted_);
        if (error_) { return false; }
        v = accepted_value_;
        return true;
    }

    bool error() { return error_; }

private:
    typedef Parser<Value, SemanticAction, StackSize> self_type;

    typedef bool (self_type::*state_type)(token_type, const value_type&);
    typedef int (self_type::*gotof_type)(Nonterminal);

    bool            accepted_;
    bool            error_;
    value_type      accepted_value_;
    SemanticAction& sa_;

    struct table_entry {
        state_type  state;
        gotof_type  gotof;
        bool        handle_error;
    };

    struct stack_frame {
        const table_entry*  entry;
        value_type          value;
        int                 sequence_length;

        stack_frame(const table_entry* e, const value_type& v, int sl)
            : entry(e), value(v), sequence_length(sl) {}
    };

    Stack<stack_frame, StackSize> stack_;

    bool push_stack(int state_index, const value_type& v, int sl = 0) {
        bool f = stack_.push(stack_frame(entry(state_index), v, sl));
        assert(!error_);
        if (!f) { 
            error_ = true;
            sa_.stack_overflow();
        }
        return f;
    }

    void pop_stack(size_t n) {
        stack_.pop(n);
    }

    stack_frame* stack_top() {
        return &stack_.top();
    }

    const value_type& get_arg(size_t base, size_t index) {
        return stack_.get_arg(base, index).value;
    }

    void clear_stack() {
        stack_.clear();
    }

    void rollback_tmp_stack() {
        stack_.rollback_tmp();
    }

    void commit_tmp_stack() {
        stack_.commit_tmp();
    }

    void recover(Token, const value_type&) {
    }

    bool call_nothing(Nonterminal nonterminal, int base) {
        pop_stack(base);
        int dest_index = (this->*(stack_top()->entry->gotof))(nonterminal);
        return push_stack(dest_index, value_type());
    }

    bool call_0_MakeBitAnd(Nonterminal nonterminal, int base, int arg_index0, int arg_index1) {
        matlab_ast::base* arg0; sa_.downcast(arg0, get_arg(base, arg_index0));
        matlab_ast::base* arg1; sa_.downcast(arg1, get_arg(base, arg_index1));
        matlab_ast::base* r = sa_.MakeBitAnd(arg0, arg1);
        value_type v; sa_.upcast(v, r);
        pop_stack(base);
        int dest_index = (this->*(stack_top()->entry->gotof))(nonterminal);
        return push_stack(dest_index, v);
    }

    bool call_0_DoNothing(Nonterminal nonterminal, int base, int arg_index0) {
        matlab_ast::base* arg0; sa_.downcast(arg0, get_arg(base, arg_index0));
        matlab_ast::base* r = sa_.DoNothing(arg0);
        value_type v; sa_.upcast(v, r);
        pop_stack(base);
        int dest_index = (this->*(stack_top()->entry->gotof))(nonterminal);
        return push_stack(dest_index, v);
    }

    bool call_0_MakeGE(Nonterminal nonterminal, int base, int arg_index0, int arg_index1) {
        matlab_ast::base* arg0; sa_.downcast(arg0, get_arg(base, arg_index0));
        matlab_ast::base* arg1; sa_.downcast(arg1, get_arg(base, arg_index1));
        matlab_ast::base* r = sa_.MakeGE(arg0, arg1);
        value_type v; sa_.upcast(v, r);
        pop_stack(base);
        int dest_index = (this->*(stack_top()->entry->gotof))(nonterminal);
        return push_stack(dest_index, v);
    }

    bool call_0_MakeGT(Nonterminal nonterminal, int base, int arg_index0, int arg_index1) {
        matlab_ast::base* arg0; sa_.downcast(arg0, get_arg(base, arg_index0));
        matlab_ast::base* arg1; sa_.downcast(arg1, get_arg(base, arg_index1));
        matlab_ast::base* r = sa_.MakeGT(arg0, arg1);
        value_type v; sa_.upcast(v, r);
        pop_stack(base);
        int dest_index = (this->*(stack_top()->entry->gotof))(nonterminal);
        return push_stack(dest_index, v);
    }

    bool call_0_MakeLE(Nonterminal nonterminal, int base, int arg_index0, int arg_index1) {
        matlab_ast::base* arg0; sa_.downcast(arg0, get_arg(base, arg_index0));
        matlab_ast::base* arg1; sa_.downcast(arg1, get_arg(base, arg_index1));
        matlab_ast::base* r = sa_.MakeLE(arg0, arg1);
        value_type v; sa_.upcast(v, r);
        pop_stack(base);
        int dest_index = (this->*(stack_top()->entry->gotof))(nonterminal);
        return push_stack(dest_index, v);
    }

    bool call_0_MakeLT(Nonterminal nonterminal, int base, int arg_index0, int arg_index1) {
        matlab_ast::base* arg0; sa_.downcast(arg0, get_arg(base, arg_index0));
        matlab_ast::base* arg1; sa_.downcast(arg1, get_arg(base, arg_index1));
        matlab_ast::base* r = sa_.MakeLT(arg0, arg1);
        value_type v; sa_.upcast(v, r);
        pop_stack(base);
        int dest_index = (this->*(stack_top()->entry->gotof))(nonterminal);
        return push_stack(dest_index, v);
    }

    bool call_0_MakeArgList(Nonterminal nonterminal, int base, int arg_index0, int arg_index1) {
        matlab_ast::base* arg0; sa_.downcast(arg0, get_arg(base, arg_index0));
        matlab_ast::base* arg1; sa_.downcast(arg1, get_arg(base, arg_index1));
        matlab_ast::base* r = sa_.MakeArgList(arg0, arg1);
        value_type v; sa_.upcast(v, r);
        pop_stack(base);
        int dest_index = (this->*(stack_top()->entry->gotof))(nonterminal);
        return push_stack(dest_index, v);
    }

    bool call_0_MakeNCTrans(Nonterminal nonterminal, int base, int arg_index0) {
        matlab_ast::base* arg0; sa_.downcast(arg0, get_arg(base, arg_index0));
        matlab_ast::base* r = sa_.MakeNCTrans(arg0);
        value_type v; sa_.upcast(v, r);
        pop_stack(base);
        int dest_index = (this->*(stack_top()->entry->gotof))(nonterminal);
        return push_stack(dest_index, v);
    }

    bool call_0_MakeTrans(Nonterminal nonterminal, int base, int arg_index0) {
        matlab_ast::base* arg0; sa_.downcast(arg0, get_arg(base, arg_index0));
        matlab_ast::base* r = sa_.MakeTrans(arg0);
        value_type v; sa_.upcast(v, r);
        pop_stack(base);
        int dest_index = (this->*(stack_top()->entry->gotof))(nonterminal);
        return push_stack(dest_index, v);
    }

    bool call_0_MakeConstant(Nonterminal nonterminal, int base, int arg_index0) {
        std::string arg0; sa_.downcast(arg0, get_arg(base, arg_index0));
        matlab_ast::base* r = sa_.MakeConstant(arg0);
        value_type v; sa_.upcast(v, r);
        pop_stack(base);
        int dest_index = (this->*(stack_top()->entry->gotof))(nonterminal);
        return push_stack(dest_index, v);
    }

    bool call_0_MakeIdentifier(Nonterminal nonterminal, int base, int arg_index0) {
        std::string arg0; sa_.downcast(arg0, get_arg(base, arg_index0));
        matlab_ast::base* r = sa_.MakeIdentifier(arg0);
        value_type v; sa_.upcast(v, r);
        pop_stack(base);
        int dest_index = (this->*(stack_top()->entry->gotof))(nonterminal);
        return push_stack(dest_index, v);
    }

    bool call_0_MakeParenExpr(Nonterminal nonterminal, int base, int arg_index0) {
        matlab_ast::base* arg0; sa_.downcast(arg0, get_arg(base, arg_index0));
        matlab_ast::base* r = sa_.MakeParenExpr(arg0);
        value_type v; sa_.upcast(v, r);
        pop_stack(base);
        int dest_index = (this->*(stack_top()->entry->gotof))(nonterminal);
        return push_stack(dest_index, v);
    }

    bool call_0_MakeCall(Nonterminal nonterminal, int base, int arg_index0, int arg_index1) {
        std::string arg0; sa_.downcast(arg0, get_arg(base, arg_index0));
        matlab_ast::base* arg1; sa_.downcast(arg1, get_arg(base, arg_index1));
        matlab_ast::base* r = sa_.MakeCall(arg0, arg1);
        value_type v; sa_.upcast(v, r);
        pop_stack(base);
        int dest_index = (this->*(stack_top()->entry->gotof))(nonterminal);
        return push_stack(dest_index, v);
    }

    bool call_0_MakePlus(Nonterminal nonterminal, int base, int arg_index0) {
        matlab_ast::base* arg0; sa_.downcast(arg0, get_arg(base, arg_index0));
        matlab_ast::base* r = sa_.MakePlus(arg0);
        value_type v; sa_.upcast(v, r);
        pop_stack(base);
        int dest_index = (this->*(stack_top()->entry->gotof))(nonterminal);
        return push_stack(dest_index, v);
    }

    bool call_0_MakeMinus(Nonterminal nonterminal, int base, int arg_index0) {
        matlab_ast::base* arg0; sa_.downcast(arg0, get_arg(base, arg_index0));
        matlab_ast::base* r = sa_.MakeMinus(arg0);
        value_type v; sa_.upcast(v, r);
        pop_stack(base);
        int dest_index = (this->*(stack_top()->entry->gotof))(nonterminal);
        return push_stack(dest_index, v);
    }

    bool call_0_MakeEqual(Nonterminal nonterminal, int base, int arg_index0, int arg_index1) {
        matlab_ast::base* arg0; sa_.downcast(arg0, get_arg(base, arg_index0));
        matlab_ast::base* arg1; sa_.downcast(arg1, get_arg(base, arg_index1));
        matlab_ast::base* r = sa_.MakeEqual(arg0, arg1);
        value_type v; sa_.upcast(v, r);
        pop_stack(base);
        int dest_index = (this->*(stack_top()->entry->gotof))(nonterminal);
        return push_stack(dest_index, v);
    }

    bool call_0_MakeNotEqual(Nonterminal nonterminal, int base, int arg_index0, int arg_index1) {
        matlab_ast::base* arg0; sa_.downcast(arg0, get_arg(base, arg_index0));
        matlab_ast::base* arg1; sa_.downcast(arg1, get_arg(base, arg_index1));
        matlab_ast::base* r = sa_.MakeNotEqual(arg0, arg1);
        value_type v; sa_.upcast(v, r);
        pop_stack(base);
        int dest_index = (this->*(stack_top()->entry->gotof))(nonterminal);
        return push_stack(dest_index, v);
    }

    bool call_0_MakeAdd(Nonterminal nonterminal, int base, int arg_index0, int arg_index1) {
        matlab_ast::base* arg0; sa_.downcast(arg0, get_arg(base, arg_index0));
        matlab_ast::base* arg1; sa_.downcast(arg1, get_arg(base, arg_index1));
        matlab_ast::base* r = sa_.MakeAdd(arg0, arg1);
        value_type v; sa_.upcast(v, r);
        pop_stack(base);
        int dest_index = (this->*(stack_top()->entry->gotof))(nonterminal);
        return push_stack(dest_index, v);
    }

    bool call_0_MakeSub(Nonterminal nonterminal, int base, int arg_index0, int arg_index1) {
        matlab_ast::base* arg0; sa_.downcast(arg0, get_arg(base, arg_index0));
        matlab_ast::base* arg1; sa_.downcast(arg1, get_arg(base, arg_index1));
        matlab_ast::base* r = sa_.MakeSub(arg0, arg1);
        value_type v; sa_.upcast(v, r);
        pop_stack(base);
        int dest_index = (this->*(stack_top()->entry->gotof))(nonterminal);
        return push_stack(dest_index, v);
    }

    bool call_0_MakeArrayPow(Nonterminal nonterminal, int base, int arg_index0, int arg_index1) {
        matlab_ast::base* arg0; sa_.downcast(arg0, get_arg(base, arg_index0));
        matlab_ast::base* arg1; sa_.downcast(arg1, get_arg(base, arg_index1));
        matlab_ast::base* r = sa_.MakeArrayPow(arg0, arg1);
        value_type v; sa_.upcast(v, r);
        pop_stack(base);
        int dest_index = (this->*(stack_top()->entry->gotof))(nonterminal);
        return push_stack(dest_index, v);
    }

    bool call_0_MakePow(Nonterminal nonterminal, int base, int arg_index0, int arg_index1) {
        matlab_ast::base* arg0; sa_.downcast(arg0, get_arg(base, arg_index0));
        matlab_ast::base* arg1; sa_.downcast(arg1, get_arg(base, arg_index1));
        matlab_ast::base* r = sa_.MakePow(arg0, arg1);
        value_type v; sa_.upcast(v, r);
        pop_stack(base);
        int dest_index = (this->*(stack_top()->entry->gotof))(nonterminal);
        return push_stack(dest_index, v);
    }

    bool call_0_MakeArrayDiv(Nonterminal nonterminal, int base, int arg_index0, int arg_index1) {
        matlab_ast::base* arg0; sa_.downcast(arg0, get_arg(base, arg_index0));
        matlab_ast::base* arg1; sa_.downcast(arg1, get_arg(base, arg_index1));
        matlab_ast::base* r = sa_.MakeArrayDiv(arg0, arg1);
        value_type v; sa_.upcast(v, r);
        pop_stack(base);
        int dest_index = (this->*(stack_top()->entry->gotof))(nonterminal);
        return push_stack(dest_index, v);
    }

    bool call_0_MakeArrayMul(Nonterminal nonterminal, int base, int arg_index0, int arg_index1) {
        matlab_ast::base* arg0; sa_.downcast(arg0, get_arg(base, arg_index0));
        matlab_ast::base* arg1; sa_.downcast(arg1, get_arg(base, arg_index1));
        matlab_ast::base* r = sa_.MakeArrayMul(arg0, arg1);
        value_type v; sa_.upcast(v, r);
        pop_stack(base);
        int dest_index = (this->*(stack_top()->entry->gotof))(nonterminal);
        return push_stack(dest_index, v);
    }

    bool call_0_MakeDiv(Nonterminal nonterminal, int base, int arg_index0, int arg_index1) {
        matlab_ast::base* arg0; sa_.downcast(arg0, get_arg(base, arg_index0));
        matlab_ast::base* arg1; sa_.downcast(arg1, get_arg(base, arg_index1));
        matlab_ast::base* r = sa_.MakeDiv(arg0, arg1);
        value_type v; sa_.upcast(v, r);
        pop_stack(base);
        int dest_index = (this->*(stack_top()->entry->gotof))(nonterminal);
        return push_stack(dest_index, v);
    }

    bool call_0_MakeMul(Nonterminal nonterminal, int base, int arg_index0, int arg_index1) {
        matlab_ast::base* arg0; sa_.downcast(arg0, get_arg(base, arg_index0));
        matlab_ast::base* arg1; sa_.downcast(arg1, get_arg(base, arg_index1));
        matlab_ast::base* r = sa_.MakeMul(arg0, arg1);
        value_type v; sa_.upcast(v, r);
        pop_stack(base);
        int dest_index = (this->*(stack_top()->entry->gotof))(nonterminal);
        return push_stack(dest_index, v);
    }

    bool call_0_MakeBitOr(Nonterminal nonterminal, int base, int arg_index0, int arg_index1) {
        matlab_ast::base* arg0; sa_.downcast(arg0, get_arg(base, arg_index0));
        matlab_ast::base* arg1; sa_.downcast(arg1, get_arg(base, arg_index1));
        matlab_ast::base* r = sa_.MakeBitOr(arg0, arg1);
        value_type v; sa_.upcast(v, r);
        pop_stack(base);
        int dest_index = (this->*(stack_top()->entry->gotof))(nonterminal);
        return push_stack(dest_index, v);
    }

    bool state_0(token_type token, const value_type& value) {
        switch(token) {
        case token_Add:
            // shift
            push_stack(/*state*/ 48, value);
            return false;
        case token_Constant:
            // shift
            push_stack(/*state*/ 61, value);
            return false;
        case token_Identifier:
            // shift
            push_stack(/*state*/ 56, value);
            return false;
        case token_LParen:
            // shift
            push_stack(/*state*/ 4, value);
            return false;
        case token_Sub:
            // shift
            push_stack(/*state*/ 50, value);
            return false;
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_0(Nonterminal nonterminal) {
        switch(nonterminal) {
        case Nonterminal_AndExpr: return 5;
        case Nonterminal_RelationalExpr: return 13;
        case Nonterminal_PostfixExpr: return 47;
        case Nonterminal_PrimaryExpr: return 52;
        case Nonterminal_CallExpr: return 53;
        case Nonterminal_UnaryExpr: return 42;
        case Nonterminal_EqualityExpr: return 10;
        case Nonterminal_AdditiveExpr: return 24;
        case Nonterminal_PowExpr: return 33;
        case Nonterminal_MultiplicativeExpr: return 32;
        case Nonterminal_Expr: return 1;
        default: assert(0); return false;
        }
    }

    bool state_1(token_type token, const value_type& value) {
        switch(token) {
        case token_eof:
            // accept
            accepted_ = true;
            accepted_value_ = get_arg(1, 0);
            return false;
        case token_BitOr:
            // shift
            push_stack(/*state*/ 8, value);
            return false;
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_1(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_2(token_type token, const value_type& value) {
        switch(token) {
        case token_Add:
            // shift
            push_stack(/*state*/ 48, value);
            return false;
        case token_Constant:
            // shift
            push_stack(/*state*/ 61, value);
            return false;
        case token_Identifier:
            // shift
            push_stack(/*state*/ 56, value);
            return false;
        case token_LParen:
            // shift
            push_stack(/*state*/ 4, value);
            return false;
        case token_Sub:
            // shift
            push_stack(/*state*/ 50, value);
            return false;
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_2(Nonterminal nonterminal) {
        switch(nonterminal) {
        case Nonterminal_AndExpr: return 5;
        case Nonterminal_RelationalExpr: return 13;
        case Nonterminal_ArgListExpr: return 57;
        case Nonterminal_PostfixExpr: return 47;
        case Nonterminal_PrimaryExpr: return 52;
        case Nonterminal_CallExpr: return 53;
        case Nonterminal_UnaryExpr: return 42;
        case Nonterminal_EqualityExpr: return 10;
        case Nonterminal_AdditiveExpr: return 24;
        case Nonterminal_PowExpr: return 33;
        case Nonterminal_MultiplicativeExpr: return 32;
        case Nonterminal_Expr: return 6;
        case Nonterminal_ArgExpr: return 59;
        default: assert(0); return false;
        }
    }

    bool state_3(token_type token, const value_type& value) {
        switch(token) {
        case token_Add:
            // shift
            push_stack(/*state*/ 48, value);
            return false;
        case token_Constant:
            // shift
            push_stack(/*state*/ 61, value);
            return false;
        case token_Identifier:
            // shift
            push_stack(/*state*/ 56, value);
            return false;
        case token_LParen:
            // shift
            push_stack(/*state*/ 4, value);
            return false;
        case token_Sub:
            // shift
            push_stack(/*state*/ 50, value);
            return false;
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_3(Nonterminal nonterminal) {
        switch(nonterminal) {
        case Nonterminal_AndExpr: return 5;
        case Nonterminal_RelationalExpr: return 13;
        case Nonterminal_PostfixExpr: return 47;
        case Nonterminal_PrimaryExpr: return 52;
        case Nonterminal_CallExpr: return 53;
        case Nonterminal_UnaryExpr: return 42;
        case Nonterminal_EqualityExpr: return 10;
        case Nonterminal_AdditiveExpr: return 24;
        case Nonterminal_PowExpr: return 33;
        case Nonterminal_MultiplicativeExpr: return 32;
        case Nonterminal_Expr: return 6;
        case Nonterminal_ArgExpr: return 60;
        default: assert(0); return false;
        }
    }

    bool state_4(token_type token, const value_type& value) {
        switch(token) {
        case token_Add:
            // shift
            push_stack(/*state*/ 48, value);
            return false;
        case token_Constant:
            // shift
            push_stack(/*state*/ 61, value);
            return false;
        case token_Identifier:
            // shift
            push_stack(/*state*/ 56, value);
            return false;
        case token_LParen:
            // shift
            push_stack(/*state*/ 4, value);
            return false;
        case token_Sub:
            // shift
            push_stack(/*state*/ 50, value);
            return false;
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_4(Nonterminal nonterminal) {
        switch(nonterminal) {
        case Nonterminal_AndExpr: return 5;
        case Nonterminal_RelationalExpr: return 13;
        case Nonterminal_PostfixExpr: return 47;
        case Nonterminal_PrimaryExpr: return 52;
        case Nonterminal_CallExpr: return 53;
        case Nonterminal_UnaryExpr: return 42;
        case Nonterminal_EqualityExpr: return 10;
        case Nonterminal_AdditiveExpr: return 24;
        case Nonterminal_PowExpr: return 33;
        case Nonterminal_MultiplicativeExpr: return 32;
        case Nonterminal_Expr: return 7;
        default: assert(0); return false;
        }
    }

    bool state_5(token_type token, const value_type& value) {
        switch(token) {
        case token_BitAnd:
            // shift
            push_stack(/*state*/ 11, value);
            return false;
        case token_eof:
        case token_BitOr:
        case token_Comma:
        case token_RParen:
            // reduce
            return call_0_DoNothing(Nonterminal_Expr, /*pop*/ 1, 0);
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_5(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_6(token_type token, const value_type& value) {
        switch(token) {
        case token_BitOr:
            // shift
            push_stack(/*state*/ 8, value);
            return false;
        case token_Comma:
        case token_RParen:
            // reduce
            return call_0_DoNothing(Nonterminal_ArgExpr, /*pop*/ 1, 0);
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_6(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_7(token_type token, const value_type& value) {
        switch(token) {
        case token_BitOr:
            // shift
            push_stack(/*state*/ 8, value);
            return false;
        case token_RParen:
            // shift
            push_stack(/*state*/ 62, value);
            return false;
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_7(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_8(token_type token, const value_type& value) {
        switch(token) {
        case token_Add:
            // shift
            push_stack(/*state*/ 48, value);
            return false;
        case token_Constant:
            // shift
            push_stack(/*state*/ 61, value);
            return false;
        case token_Identifier:
            // shift
            push_stack(/*state*/ 56, value);
            return false;
        case token_LParen:
            // shift
            push_stack(/*state*/ 4, value);
            return false;
        case token_Sub:
            // shift
            push_stack(/*state*/ 50, value);
            return false;
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_8(Nonterminal nonterminal) {
        switch(nonterminal) {
        case Nonterminal_AndExpr: return 9;
        case Nonterminal_RelationalExpr: return 13;
        case Nonterminal_PostfixExpr: return 47;
        case Nonterminal_PrimaryExpr: return 52;
        case Nonterminal_CallExpr: return 53;
        case Nonterminal_UnaryExpr: return 42;
        case Nonterminal_EqualityExpr: return 10;
        case Nonterminal_AdditiveExpr: return 24;
        case Nonterminal_PowExpr: return 33;
        case Nonterminal_MultiplicativeExpr: return 32;
        default: assert(0); return false;
        }
    }

    bool state_9(token_type token, const value_type& value) {
        switch(token) {
        case token_BitAnd:
            // shift
            push_stack(/*state*/ 11, value);
            return false;
        case token_eof:
        case token_BitOr:
        case token_Comma:
        case token_RParen:
            // reduce
            return call_0_MakeBitOr(Nonterminal_Expr, /*pop*/ 3, 0, 2);
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_9(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_10(token_type token, const value_type& value) {
        switch(token) {
        case token_Eq:
            // shift
            push_stack(/*state*/ 14, value);
            return false;
        case token_NEq:
            // shift
            push_stack(/*state*/ 16, value);
            return false;
        case token_eof:
        case token_BitAnd:
        case token_BitOr:
        case token_Comma:
        case token_RParen:
            // reduce
            return call_0_DoNothing(Nonterminal_AndExpr, /*pop*/ 1, 0);
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_10(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_11(token_type token, const value_type& value) {
        switch(token) {
        case token_Add:
            // shift
            push_stack(/*state*/ 48, value);
            return false;
        case token_Constant:
            // shift
            push_stack(/*state*/ 61, value);
            return false;
        case token_Identifier:
            // shift
            push_stack(/*state*/ 56, value);
            return false;
        case token_LParen:
            // shift
            push_stack(/*state*/ 4, value);
            return false;
        case token_Sub:
            // shift
            push_stack(/*state*/ 50, value);
            return false;
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_11(Nonterminal nonterminal) {
        switch(nonterminal) {
        case Nonterminal_RelationalExpr: return 13;
        case Nonterminal_PostfixExpr: return 47;
        case Nonterminal_PrimaryExpr: return 52;
        case Nonterminal_CallExpr: return 53;
        case Nonterminal_UnaryExpr: return 42;
        case Nonterminal_EqualityExpr: return 12;
        case Nonterminal_AdditiveExpr: return 24;
        case Nonterminal_PowExpr: return 33;
        case Nonterminal_MultiplicativeExpr: return 32;
        default: assert(0); return false;
        }
    }

    bool state_12(token_type token, const value_type& value) {
        switch(token) {
        case token_Eq:
            // shift
            push_stack(/*state*/ 14, value);
            return false;
        case token_NEq:
            // shift
            push_stack(/*state*/ 16, value);
            return false;
        case token_eof:
        case token_BitAnd:
        case token_BitOr:
        case token_Comma:
        case token_RParen:
            // reduce
            return call_0_MakeBitAnd(Nonterminal_AndExpr, /*pop*/ 3, 0, 2);
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_12(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_13(token_type token, const value_type& value) {
        switch(token) {
        case token_Add:
            // shift
            push_stack(/*state*/ 22, value);
            return false;
        case token_GE:
            // shift
            push_stack(/*state*/ 21, value);
            return false;
        case token_GT:
            // shift
            push_stack(/*state*/ 19, value);
            return false;
        case token_LE:
            // shift
            push_stack(/*state*/ 20, value);
            return false;
        case token_LT:
            // shift
            push_stack(/*state*/ 18, value);
            return false;
        case token_Sub:
            // shift
            push_stack(/*state*/ 23, value);
            return false;
        case token_eof:
        case token_BitAnd:
        case token_BitOr:
        case token_Comma:
        case token_Eq:
        case token_NEq:
        case token_RParen:
            // reduce
            return call_0_DoNothing(Nonterminal_EqualityExpr, /*pop*/ 1, 0);
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_13(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_14(token_type token, const value_type& value) {
        switch(token) {
        case token_Add:
            // shift
            push_stack(/*state*/ 48, value);
            return false;
        case token_Constant:
            // shift
            push_stack(/*state*/ 61, value);
            return false;
        case token_Identifier:
            // shift
            push_stack(/*state*/ 56, value);
            return false;
        case token_LParen:
            // shift
            push_stack(/*state*/ 4, value);
            return false;
        case token_Sub:
            // shift
            push_stack(/*state*/ 50, value);
            return false;
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_14(Nonterminal nonterminal) {
        switch(nonterminal) {
        case Nonterminal_RelationalExpr: return 15;
        case Nonterminal_PostfixExpr: return 47;
        case Nonterminal_PrimaryExpr: return 52;
        case Nonterminal_CallExpr: return 53;
        case Nonterminal_UnaryExpr: return 42;
        case Nonterminal_AdditiveExpr: return 24;
        case Nonterminal_PowExpr: return 33;
        case Nonterminal_MultiplicativeExpr: return 32;
        default: assert(0); return false;
        }
    }

    bool state_15(token_type token, const value_type& value) {
        switch(token) {
        case token_Add:
            // shift
            push_stack(/*state*/ 22, value);
            return false;
        case token_GE:
            // shift
            push_stack(/*state*/ 21, value);
            return false;
        case token_GT:
            // shift
            push_stack(/*state*/ 19, value);
            return false;
        case token_LE:
            // shift
            push_stack(/*state*/ 20, value);
            return false;
        case token_LT:
            // shift
            push_stack(/*state*/ 18, value);
            return false;
        case token_Sub:
            // shift
            push_stack(/*state*/ 23, value);
            return false;
        case token_eof:
        case token_BitAnd:
        case token_BitOr:
        case token_Comma:
        case token_Eq:
        case token_NEq:
        case token_RParen:
            // reduce
            return call_0_MakeEqual(Nonterminal_EqualityExpr, /*pop*/ 3, 0, 2);
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_15(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_16(token_type token, const value_type& value) {
        switch(token) {
        case token_Add:
            // shift
            push_stack(/*state*/ 48, value);
            return false;
        case token_Constant:
            // shift
            push_stack(/*state*/ 61, value);
            return false;
        case token_Identifier:
            // shift
            push_stack(/*state*/ 56, value);
            return false;
        case token_LParen:
            // shift
            push_stack(/*state*/ 4, value);
            return false;
        case token_Sub:
            // shift
            push_stack(/*state*/ 50, value);
            return false;
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_16(Nonterminal nonterminal) {
        switch(nonterminal) {
        case Nonterminal_RelationalExpr: return 17;
        case Nonterminal_PostfixExpr: return 47;
        case Nonterminal_PrimaryExpr: return 52;
        case Nonterminal_CallExpr: return 53;
        case Nonterminal_UnaryExpr: return 42;
        case Nonterminal_AdditiveExpr: return 24;
        case Nonterminal_PowExpr: return 33;
        case Nonterminal_MultiplicativeExpr: return 32;
        default: assert(0); return false;
        }
    }

    bool state_17(token_type token, const value_type& value) {
        switch(token) {
        case token_Add:
            // shift
            push_stack(/*state*/ 22, value);
            return false;
        case token_GE:
            // shift
            push_stack(/*state*/ 21, value);
            return false;
        case token_GT:
            // shift
            push_stack(/*state*/ 19, value);
            return false;
        case token_LE:
            // shift
            push_stack(/*state*/ 20, value);
            return false;
        case token_LT:
            // shift
            push_stack(/*state*/ 18, value);
            return false;
        case token_Sub:
            // shift
            push_stack(/*state*/ 23, value);
            return false;
        case token_eof:
        case token_BitAnd:
        case token_BitOr:
        case token_Comma:
        case token_Eq:
        case token_NEq:
        case token_RParen:
            // reduce
            return call_0_MakeNotEqual(Nonterminal_EqualityExpr, /*pop*/ 3, 0, 2);
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_17(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_18(token_type token, const value_type& value) {
        switch(token) {
        case token_Add:
            // shift
            push_stack(/*state*/ 48, value);
            return false;
        case token_Constant:
            // shift
            push_stack(/*state*/ 61, value);
            return false;
        case token_Identifier:
            // shift
            push_stack(/*state*/ 56, value);
            return false;
        case token_LParen:
            // shift
            push_stack(/*state*/ 4, value);
            return false;
        case token_Sub:
            // shift
            push_stack(/*state*/ 50, value);
            return false;
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_18(Nonterminal nonterminal) {
        switch(nonterminal) {
        case Nonterminal_RelationalExpr: return 31;
        case Nonterminal_PostfixExpr: return 47;
        case Nonterminal_PrimaryExpr: return 52;
        case Nonterminal_CallExpr: return 53;
        case Nonterminal_UnaryExpr: return 42;
        case Nonterminal_AdditiveExpr: return 25;
        case Nonterminal_PowExpr: return 33;
        case Nonterminal_MultiplicativeExpr: return 32;
        default: assert(0); return false;
        }
    }

    bool state_19(token_type token, const value_type& value) {
        switch(token) {
        case token_Add:
            // shift
            push_stack(/*state*/ 48, value);
            return false;
        case token_Constant:
            // shift
            push_stack(/*state*/ 61, value);
            return false;
        case token_Identifier:
            // shift
            push_stack(/*state*/ 56, value);
            return false;
        case token_LParen:
            // shift
            push_stack(/*state*/ 4, value);
            return false;
        case token_Sub:
            // shift
            push_stack(/*state*/ 50, value);
            return false;
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_19(Nonterminal nonterminal) {
        switch(nonterminal) {
        case Nonterminal_RelationalExpr: return 31;
        case Nonterminal_PostfixExpr: return 47;
        case Nonterminal_PrimaryExpr: return 52;
        case Nonterminal_CallExpr: return 53;
        case Nonterminal_UnaryExpr: return 42;
        case Nonterminal_AdditiveExpr: return 26;
        case Nonterminal_PowExpr: return 33;
        case Nonterminal_MultiplicativeExpr: return 32;
        default: assert(0); return false;
        }
    }

    bool state_20(token_type token, const value_type& value) {
        switch(token) {
        case token_Add:
            // shift
            push_stack(/*state*/ 48, value);
            return false;
        case token_Constant:
            // shift
            push_stack(/*state*/ 61, value);
            return false;
        case token_Identifier:
            // shift
            push_stack(/*state*/ 56, value);
            return false;
        case token_LParen:
            // shift
            push_stack(/*state*/ 4, value);
            return false;
        case token_Sub:
            // shift
            push_stack(/*state*/ 50, value);
            return false;
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_20(Nonterminal nonterminal) {
        switch(nonterminal) {
        case Nonterminal_RelationalExpr: return 31;
        case Nonterminal_PostfixExpr: return 47;
        case Nonterminal_PrimaryExpr: return 52;
        case Nonterminal_CallExpr: return 53;
        case Nonterminal_UnaryExpr: return 42;
        case Nonterminal_AdditiveExpr: return 27;
        case Nonterminal_PowExpr: return 33;
        case Nonterminal_MultiplicativeExpr: return 32;
        default: assert(0); return false;
        }
    }

    bool state_21(token_type token, const value_type& value) {
        switch(token) {
        case token_Add:
            // shift
            push_stack(/*state*/ 48, value);
            return false;
        case token_Constant:
            // shift
            push_stack(/*state*/ 61, value);
            return false;
        case token_Identifier:
            // shift
            push_stack(/*state*/ 56, value);
            return false;
        case token_LParen:
            // shift
            push_stack(/*state*/ 4, value);
            return false;
        case token_Sub:
            // shift
            push_stack(/*state*/ 50, value);
            return false;
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_21(Nonterminal nonterminal) {
        switch(nonterminal) {
        case Nonterminal_RelationalExpr: return 31;
        case Nonterminal_PostfixExpr: return 47;
        case Nonterminal_PrimaryExpr: return 52;
        case Nonterminal_CallExpr: return 53;
        case Nonterminal_UnaryExpr: return 42;
        case Nonterminal_AdditiveExpr: return 28;
        case Nonterminal_PowExpr: return 33;
        case Nonterminal_MultiplicativeExpr: return 32;
        default: assert(0); return false;
        }
    }

    bool state_22(token_type token, const value_type& value) {
        switch(token) {
        case token_Add:
            // shift
            push_stack(/*state*/ 48, value);
            return false;
        case token_Constant:
            // shift
            push_stack(/*state*/ 61, value);
            return false;
        case token_Identifier:
            // shift
            push_stack(/*state*/ 56, value);
            return false;
        case token_LParen:
            // shift
            push_stack(/*state*/ 4, value);
            return false;
        case token_Sub:
            // shift
            push_stack(/*state*/ 50, value);
            return false;
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_22(Nonterminal nonterminal) {
        switch(nonterminal) {
        case Nonterminal_RelationalExpr: return 31;
        case Nonterminal_PostfixExpr: return 47;
        case Nonterminal_PrimaryExpr: return 52;
        case Nonterminal_CallExpr: return 53;
        case Nonterminal_UnaryExpr: return 42;
        case Nonterminal_AdditiveExpr: return 29;
        case Nonterminal_PowExpr: return 33;
        case Nonterminal_MultiplicativeExpr: return 32;
        default: assert(0); return false;
        }
    }

    bool state_23(token_type token, const value_type& value) {
        switch(token) {
        case token_Add:
            // shift
            push_stack(/*state*/ 48, value);
            return false;
        case token_Constant:
            // shift
            push_stack(/*state*/ 61, value);
            return false;
        case token_Identifier:
            // shift
            push_stack(/*state*/ 56, value);
            return false;
        case token_LParen:
            // shift
            push_stack(/*state*/ 4, value);
            return false;
        case token_Sub:
            // shift
            push_stack(/*state*/ 50, value);
            return false;
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_23(Nonterminal nonterminal) {
        switch(nonterminal) {
        case Nonterminal_RelationalExpr: return 31;
        case Nonterminal_PostfixExpr: return 47;
        case Nonterminal_PrimaryExpr: return 52;
        case Nonterminal_CallExpr: return 53;
        case Nonterminal_UnaryExpr: return 42;
        case Nonterminal_AdditiveExpr: return 30;
        case Nonterminal_PowExpr: return 33;
        case Nonterminal_MultiplicativeExpr: return 32;
        default: assert(0); return false;
        }
    }

    bool state_24(token_type token, const value_type& value) {
        switch(token) {
        case token_eof:
        case token_Add:
        case token_BitAnd:
        case token_BitOr:
        case token_Comma:
        case token_Eq:
        case token_GE:
        case token_GT:
        case token_LE:
        case token_LT:
        case token_NEq:
        case token_RParen:
        case token_Sub:
            // reduce
            return call_0_DoNothing(Nonterminal_RelationalExpr, /*pop*/ 1, 0);
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_24(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_25(token_type token, const value_type& value) {
        switch(token) {
        case token_Add:
        case token_GE:
        case token_GT:
        case token_LE:
        case token_LT:
        case token_Sub:
            // reduce
            return call_0_DoNothing(Nonterminal_RelationalExpr, /*pop*/ 1, 0);
        case token_eof:
        case token_BitAnd:
        case token_BitOr:
        case token_Comma:
        case token_Eq:
        case token_NEq:
        case token_RParen:
            // reduce
            return call_0_MakeLT(Nonterminal_RelationalExpr, /*pop*/ 3, 0, 2);
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_25(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_26(token_type token, const value_type& value) {
        switch(token) {
        case token_Add:
        case token_GE:
        case token_GT:
        case token_LE:
        case token_LT:
        case token_Sub:
            // reduce
            return call_0_DoNothing(Nonterminal_RelationalExpr, /*pop*/ 1, 0);
        case token_eof:
        case token_BitAnd:
        case token_BitOr:
        case token_Comma:
        case token_Eq:
        case token_NEq:
        case token_RParen:
            // reduce
            return call_0_MakeGT(Nonterminal_RelationalExpr, /*pop*/ 3, 0, 2);
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_26(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_27(token_type token, const value_type& value) {
        switch(token) {
        case token_Add:
        case token_GE:
        case token_GT:
        case token_LE:
        case token_LT:
        case token_Sub:
            // reduce
            return call_0_DoNothing(Nonterminal_RelationalExpr, /*pop*/ 1, 0);
        case token_eof:
        case token_BitAnd:
        case token_BitOr:
        case token_Comma:
        case token_Eq:
        case token_NEq:
        case token_RParen:
            // reduce
            return call_0_MakeLE(Nonterminal_RelationalExpr, /*pop*/ 3, 0, 2);
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_27(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_28(token_type token, const value_type& value) {
        switch(token) {
        case token_Add:
        case token_GE:
        case token_GT:
        case token_LE:
        case token_LT:
        case token_Sub:
            // reduce
            return call_0_DoNothing(Nonterminal_RelationalExpr, /*pop*/ 1, 0);
        case token_eof:
        case token_BitAnd:
        case token_BitOr:
        case token_Comma:
        case token_Eq:
        case token_NEq:
        case token_RParen:
            // reduce
            return call_0_MakeGE(Nonterminal_RelationalExpr, /*pop*/ 3, 0, 2);
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_28(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_29(token_type token, const value_type& value) {
        switch(token) {
        case token_Add:
        case token_GE:
        case token_GT:
        case token_LE:
        case token_LT:
        case token_Sub:
            // reduce
            return call_0_DoNothing(Nonterminal_RelationalExpr, /*pop*/ 1, 0);
        case token_eof:
        case token_BitAnd:
        case token_BitOr:
        case token_Comma:
        case token_Eq:
        case token_NEq:
        case token_RParen:
            // reduce
            return call_0_MakeAdd(Nonterminal_AdditiveExpr, /*pop*/ 3, 0, 2);
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_29(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_30(token_type token, const value_type& value) {
        switch(token) {
        case token_Add:
        case token_GE:
        case token_GT:
        case token_LE:
        case token_LT:
        case token_Sub:
            // reduce
            return call_0_DoNothing(Nonterminal_RelationalExpr, /*pop*/ 1, 0);
        case token_eof:
        case token_BitAnd:
        case token_BitOr:
        case token_Comma:
        case token_Eq:
        case token_NEq:
        case token_RParen:
            // reduce
            return call_0_MakeSub(Nonterminal_AdditiveExpr, /*pop*/ 3, 0, 2);
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_30(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_31(token_type token, const value_type& value) {
        switch(token) {
        case token_Add:
            // shift
            push_stack(/*state*/ 22, value);
            return false;
        case token_GE:
            // shift
            push_stack(/*state*/ 21, value);
            return false;
        case token_GT:
            // shift
            push_stack(/*state*/ 19, value);
            return false;
        case token_LE:
            // shift
            push_stack(/*state*/ 20, value);
            return false;
        case token_LT:
            // shift
            push_stack(/*state*/ 18, value);
            return false;
        case token_Sub:
            // shift
            push_stack(/*state*/ 23, value);
            return false;
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_31(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_32(token_type token, const value_type& value) {
        switch(token) {
        case token_ArrayDiv:
            // shift
            push_stack(/*state*/ 40, value);
            return false;
        case token_ArrayMul:
            // shift
            push_stack(/*state*/ 38, value);
            return false;
        case token_Div:
            // shift
            push_stack(/*state*/ 36, value);
            return false;
        case token_Mul:
            // shift
            push_stack(/*state*/ 34, value);
            return false;
        case token_eof:
        case token_Add:
        case token_BitAnd:
        case token_BitOr:
        case token_Comma:
        case token_Eq:
        case token_GE:
        case token_GT:
        case token_LE:
        case token_LT:
        case token_NEq:
        case token_RParen:
        case token_Sub:
            // reduce
            return call_0_DoNothing(Nonterminal_AdditiveExpr, /*pop*/ 1, 0);
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_32(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_33(token_type token, const value_type& value) {
        switch(token) {
        case token_ArrayPow:
            // shift
            push_stack(/*state*/ 45, value);
            return false;
        case token_Pow:
            // shift
            push_stack(/*state*/ 43, value);
            return false;
        case token_eof:
        case token_Add:
        case token_ArrayDiv:
        case token_ArrayMul:
        case token_BitAnd:
        case token_BitOr:
        case token_Comma:
        case token_Div:
        case token_Eq:
        case token_GE:
        case token_GT:
        case token_LE:
        case token_LT:
        case token_Mul:
        case token_NEq:
        case token_RParen:
        case token_Sub:
            // reduce
            return call_0_DoNothing(Nonterminal_MultiplicativeExpr, /*pop*/ 1, 0);
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_33(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_34(token_type token, const value_type& value) {
        switch(token) {
        case token_Add:
            // shift
            push_stack(/*state*/ 48, value);
            return false;
        case token_Constant:
            // shift
            push_stack(/*state*/ 61, value);
            return false;
        case token_Identifier:
            // shift
            push_stack(/*state*/ 56, value);
            return false;
        case token_LParen:
            // shift
            push_stack(/*state*/ 4, value);
            return false;
        case token_Sub:
            // shift
            push_stack(/*state*/ 50, value);
            return false;
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_34(Nonterminal nonterminal) {
        switch(nonterminal) {
        case Nonterminal_PostfixExpr: return 47;
        case Nonterminal_PrimaryExpr: return 52;
        case Nonterminal_CallExpr: return 53;
        case Nonterminal_UnaryExpr: return 42;
        case Nonterminal_PowExpr: return 35;
        default: assert(0); return false;
        }
    }

    bool state_35(token_type token, const value_type& value) {
        switch(token) {
        case token_ArrayPow:
            // shift
            push_stack(/*state*/ 45, value);
            return false;
        case token_Pow:
            // shift
            push_stack(/*state*/ 43, value);
            return false;
        case token_eof:
        case token_Add:
        case token_ArrayDiv:
        case token_ArrayMul:
        case token_BitAnd:
        case token_BitOr:
        case token_Comma:
        case token_Div:
        case token_Eq:
        case token_GE:
        case token_GT:
        case token_LE:
        case token_LT:
        case token_Mul:
        case token_NEq:
        case token_RParen:
        case token_Sub:
            // reduce
            return call_0_MakeMul(Nonterminal_MultiplicativeExpr, /*pop*/ 3, 0, 2);
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_35(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_36(token_type token, const value_type& value) {
        switch(token) {
        case token_Add:
            // shift
            push_stack(/*state*/ 48, value);
            return false;
        case token_Constant:
            // shift
            push_stack(/*state*/ 61, value);
            return false;
        case token_Identifier:
            // shift
            push_stack(/*state*/ 56, value);
            return false;
        case token_LParen:
            // shift
            push_stack(/*state*/ 4, value);
            return false;
        case token_Sub:
            // shift
            push_stack(/*state*/ 50, value);
            return false;
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_36(Nonterminal nonterminal) {
        switch(nonterminal) {
        case Nonterminal_PostfixExpr: return 47;
        case Nonterminal_PrimaryExpr: return 52;
        case Nonterminal_CallExpr: return 53;
        case Nonterminal_UnaryExpr: return 42;
        case Nonterminal_PowExpr: return 37;
        default: assert(0); return false;
        }
    }

    bool state_37(token_type token, const value_type& value) {
        switch(token) {
        case token_ArrayPow:
            // shift
            push_stack(/*state*/ 45, value);
            return false;
        case token_Pow:
            // shift
            push_stack(/*state*/ 43, value);
            return false;
        case token_eof:
        case token_Add:
        case token_ArrayDiv:
        case token_ArrayMul:
        case token_BitAnd:
        case token_BitOr:
        case token_Comma:
        case token_Div:
        case token_Eq:
        case token_GE:
        case token_GT:
        case token_LE:
        case token_LT:
        case token_Mul:
        case token_NEq:
        case token_RParen:
        case token_Sub:
            // reduce
            return call_0_MakeDiv(Nonterminal_MultiplicativeExpr, /*pop*/ 3, 0, 2);
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_37(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_38(token_type token, const value_type& value) {
        switch(token) {
        case token_Add:
            // shift
            push_stack(/*state*/ 48, value);
            return false;
        case token_Constant:
            // shift
            push_stack(/*state*/ 61, value);
            return false;
        case token_Identifier:
            // shift
            push_stack(/*state*/ 56, value);
            return false;
        case token_LParen:
            // shift
            push_stack(/*state*/ 4, value);
            return false;
        case token_Sub:
            // shift
            push_stack(/*state*/ 50, value);
            return false;
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_38(Nonterminal nonterminal) {
        switch(nonterminal) {
        case Nonterminal_PostfixExpr: return 47;
        case Nonterminal_PrimaryExpr: return 52;
        case Nonterminal_CallExpr: return 53;
        case Nonterminal_UnaryExpr: return 42;
        case Nonterminal_PowExpr: return 39;
        default: assert(0); return false;
        }
    }

    bool state_39(token_type token, const value_type& value) {
        switch(token) {
        case token_ArrayPow:
            // shift
            push_stack(/*state*/ 45, value);
            return false;
        case token_Pow:
            // shift
            push_stack(/*state*/ 43, value);
            return false;
        case token_eof:
        case token_Add:
        case token_ArrayDiv:
        case token_ArrayMul:
        case token_BitAnd:
        case token_BitOr:
        case token_Comma:
        case token_Div:
        case token_Eq:
        case token_GE:
        case token_GT:
        case token_LE:
        case token_LT:
        case token_Mul:
        case token_NEq:
        case token_RParen:
        case token_Sub:
            // reduce
            return call_0_MakeArrayMul(Nonterminal_MultiplicativeExpr, /*pop*/ 3, 0, 2);
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_39(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_40(token_type token, const value_type& value) {
        switch(token) {
        case token_Add:
            // shift
            push_stack(/*state*/ 48, value);
            return false;
        case token_Constant:
            // shift
            push_stack(/*state*/ 61, value);
            return false;
        case token_Identifier:
            // shift
            push_stack(/*state*/ 56, value);
            return false;
        case token_LParen:
            // shift
            push_stack(/*state*/ 4, value);
            return false;
        case token_Sub:
            // shift
            push_stack(/*state*/ 50, value);
            return false;
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_40(Nonterminal nonterminal) {
        switch(nonterminal) {
        case Nonterminal_PostfixExpr: return 47;
        case Nonterminal_PrimaryExpr: return 52;
        case Nonterminal_CallExpr: return 53;
        case Nonterminal_UnaryExpr: return 42;
        case Nonterminal_PowExpr: return 41;
        default: assert(0); return false;
        }
    }

    bool state_41(token_type token, const value_type& value) {
        switch(token) {
        case token_ArrayPow:
            // shift
            push_stack(/*state*/ 45, value);
            return false;
        case token_Pow:
            // shift
            push_stack(/*state*/ 43, value);
            return false;
        case token_eof:
        case token_Add:
        case token_ArrayDiv:
        case token_ArrayMul:
        case token_BitAnd:
        case token_BitOr:
        case token_Comma:
        case token_Div:
        case token_Eq:
        case token_GE:
        case token_GT:
        case token_LE:
        case token_LT:
        case token_Mul:
        case token_NEq:
        case token_RParen:
        case token_Sub:
            // reduce
            return call_0_MakeArrayDiv(Nonterminal_MultiplicativeExpr, /*pop*/ 3, 0, 2);
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_41(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_42(token_type token, const value_type& value) {
        switch(token) {
        case token_eof:
        case token_Add:
        case token_ArrayDiv:
        case token_ArrayMul:
        case token_ArrayPow:
        case token_BitAnd:
        case token_BitOr:
        case token_Comma:
        case token_Div:
        case token_Eq:
        case token_GE:
        case token_GT:
        case token_LE:
        case token_LT:
        case token_Mul:
        case token_NEq:
        case token_Pow:
        case token_RParen:
        case token_Sub:
            // reduce
            return call_0_DoNothing(Nonterminal_PowExpr, /*pop*/ 1, 0);
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_42(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_43(token_type token, const value_type& value) {
        switch(token) {
        case token_Add:
            // shift
            push_stack(/*state*/ 48, value);
            return false;
        case token_Constant:
            // shift
            push_stack(/*state*/ 61, value);
            return false;
        case token_Identifier:
            // shift
            push_stack(/*state*/ 56, value);
            return false;
        case token_LParen:
            // shift
            push_stack(/*state*/ 4, value);
            return false;
        case token_Sub:
            // shift
            push_stack(/*state*/ 50, value);
            return false;
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_43(Nonterminal nonterminal) {
        switch(nonterminal) {
        case Nonterminal_PostfixExpr: return 47;
        case Nonterminal_PrimaryExpr: return 52;
        case Nonterminal_CallExpr: return 53;
        case Nonterminal_UnaryExpr: return 44;
        default: assert(0); return false;
        }
    }

    bool state_44(token_type token, const value_type& value) {
        switch(token) {
        case token_eof:
        case token_Add:
        case token_ArrayDiv:
        case token_ArrayMul:
        case token_ArrayPow:
        case token_BitAnd:
        case token_BitOr:
        case token_Comma:
        case token_Div:
        case token_Eq:
        case token_GE:
        case token_GT:
        case token_LE:
        case token_LT:
        case token_Mul:
        case token_NEq:
        case token_Pow:
        case token_RParen:
        case token_Sub:
            // reduce
            return call_0_MakePow(Nonterminal_PowExpr, /*pop*/ 3, 0, 2);
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_44(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_45(token_type token, const value_type& value) {
        switch(token) {
        case token_Add:
            // shift
            push_stack(/*state*/ 48, value);
            return false;
        case token_Constant:
            // shift
            push_stack(/*state*/ 61, value);
            return false;
        case token_Identifier:
            // shift
            push_stack(/*state*/ 56, value);
            return false;
        case token_LParen:
            // shift
            push_stack(/*state*/ 4, value);
            return false;
        case token_Sub:
            // shift
            push_stack(/*state*/ 50, value);
            return false;
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_45(Nonterminal nonterminal) {
        switch(nonterminal) {
        case Nonterminal_PostfixExpr: return 47;
        case Nonterminal_PrimaryExpr: return 52;
        case Nonterminal_CallExpr: return 53;
        case Nonterminal_UnaryExpr: return 46;
        default: assert(0); return false;
        }
    }

    bool state_46(token_type token, const value_type& value) {
        switch(token) {
        case token_eof:
        case token_Add:
        case token_ArrayDiv:
        case token_ArrayMul:
        case token_ArrayPow:
        case token_BitAnd:
        case token_BitOr:
        case token_Comma:
        case token_Div:
        case token_Eq:
        case token_GE:
        case token_GT:
        case token_LE:
        case token_LT:
        case token_Mul:
        case token_NEq:
        case token_Pow:
        case token_RParen:
        case token_Sub:
            // reduce
            return call_0_MakeArrayPow(Nonterminal_PowExpr, /*pop*/ 3, 0, 2);
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_46(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_47(token_type token, const value_type& value) {
        switch(token) {
        case token_NCTrans:
            // shift
            push_stack(/*state*/ 55, value);
            return false;
        case token_Trans:
            // shift
            push_stack(/*state*/ 54, value);
            return false;
        case token_eof:
        case token_Add:
        case token_ArrayDiv:
        case token_ArrayMul:
        case token_ArrayPow:
        case token_BitAnd:
        case token_BitOr:
        case token_Comma:
        case token_Div:
        case token_Eq:
        case token_GE:
        case token_GT:
        case token_LE:
        case token_LT:
        case token_Mul:
        case token_NEq:
        case token_Pow:
        case token_RParen:
        case token_Sub:
            // reduce
            return call_0_DoNothing(Nonterminal_UnaryExpr, /*pop*/ 1, 0);
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_47(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_48(token_type token, const value_type& value) {
        switch(token) {
        case token_Constant:
            // shift
            push_stack(/*state*/ 61, value);
            return false;
        case token_Identifier:
            // shift
            push_stack(/*state*/ 56, value);
            return false;
        case token_LParen:
            // shift
            push_stack(/*state*/ 4, value);
            return false;
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_48(Nonterminal nonterminal) {
        switch(nonterminal) {
        case Nonterminal_PostfixExpr: return 49;
        case Nonterminal_PrimaryExpr: return 52;
        case Nonterminal_CallExpr: return 53;
        default: assert(0); return false;
        }
    }

    bool state_49(token_type token, const value_type& value) {
        switch(token) {
        case token_NCTrans:
            // shift
            push_stack(/*state*/ 55, value);
            return false;
        case token_Trans:
            // shift
            push_stack(/*state*/ 54, value);
            return false;
        case token_eof:
        case token_Add:
        case token_ArrayDiv:
        case token_ArrayMul:
        case token_ArrayPow:
        case token_BitAnd:
        case token_BitOr:
        case token_Comma:
        case token_Div:
        case token_Eq:
        case token_GE:
        case token_GT:
        case token_LE:
        case token_LT:
        case token_Mul:
        case token_NEq:
        case token_Pow:
        case token_RParen:
        case token_Sub:
            // reduce
            return call_0_MakePlus(Nonterminal_UnaryExpr, /*pop*/ 2, 1);
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_49(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_50(token_type token, const value_type& value) {
        switch(token) {
        case token_Constant:
            // shift
            push_stack(/*state*/ 61, value);
            return false;
        case token_Identifier:
            // shift
            push_stack(/*state*/ 56, value);
            return false;
        case token_LParen:
            // shift
            push_stack(/*state*/ 4, value);
            return false;
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_50(Nonterminal nonterminal) {
        switch(nonterminal) {
        case Nonterminal_PostfixExpr: return 51;
        case Nonterminal_PrimaryExpr: return 52;
        case Nonterminal_CallExpr: return 53;
        default: assert(0); return false;
        }
    }

    bool state_51(token_type token, const value_type& value) {
        switch(token) {
        case token_NCTrans:
            // shift
            push_stack(/*state*/ 55, value);
            return false;
        case token_Trans:
            // shift
            push_stack(/*state*/ 54, value);
            return false;
        case token_eof:
        case token_Add:
        case token_ArrayDiv:
        case token_ArrayMul:
        case token_ArrayPow:
        case token_BitAnd:
        case token_BitOr:
        case token_Comma:
        case token_Div:
        case token_Eq:
        case token_GE:
        case token_GT:
        case token_LE:
        case token_LT:
        case token_Mul:
        case token_NEq:
        case token_Pow:
        case token_RParen:
        case token_Sub:
            // reduce
            return call_0_MakeMinus(Nonterminal_UnaryExpr, /*pop*/ 2, 1);
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_51(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_52(token_type token, const value_type& value) {
        switch(token) {
        case token_eof:
        case token_Add:
        case token_ArrayDiv:
        case token_ArrayMul:
        case token_ArrayPow:
        case token_BitAnd:
        case token_BitOr:
        case token_Comma:
        case token_Div:
        case token_Eq:
        case token_GE:
        case token_GT:
        case token_LE:
        case token_LT:
        case token_Mul:
        case token_NCTrans:
        case token_NEq:
        case token_Pow:
        case token_RParen:
        case token_Sub:
        case token_Trans:
            // reduce
            return call_0_DoNothing(Nonterminal_PostfixExpr, /*pop*/ 1, 0);
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_52(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_53(token_type token, const value_type& value) {
        switch(token) {
        case token_eof:
        case token_Add:
        case token_ArrayDiv:
        case token_ArrayMul:
        case token_ArrayPow:
        case token_BitAnd:
        case token_BitOr:
        case token_Comma:
        case token_Div:
        case token_Eq:
        case token_GE:
        case token_GT:
        case token_LE:
        case token_LT:
        case token_Mul:
        case token_NCTrans:
        case token_NEq:
        case token_Pow:
        case token_RParen:
        case token_Sub:
        case token_Trans:
            // reduce
            return call_0_DoNothing(Nonterminal_PostfixExpr, /*pop*/ 1, 0);
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_53(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_54(token_type token, const value_type& value) {
        switch(token) {
        case token_eof:
        case token_Add:
        case token_ArrayDiv:
        case token_ArrayMul:
        case token_ArrayPow:
        case token_BitAnd:
        case token_BitOr:
        case token_Comma:
        case token_Div:
        case token_Eq:
        case token_GE:
        case token_GT:
        case token_LE:
        case token_LT:
        case token_Mul:
        case token_NCTrans:
        case token_NEq:
        case token_Pow:
        case token_RParen:
        case token_Sub:
        case token_Trans:
            // reduce
            return call_0_MakeTrans(Nonterminal_PostfixExpr, /*pop*/ 2, 0);
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_54(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_55(token_type token, const value_type& value) {
        switch(token) {
        case token_eof:
        case token_Add:
        case token_ArrayDiv:
        case token_ArrayMul:
        case token_ArrayPow:
        case token_BitAnd:
        case token_BitOr:
        case token_Comma:
        case token_Div:
        case token_Eq:
        case token_GE:
        case token_GT:
        case token_LE:
        case token_LT:
        case token_Mul:
        case token_NCTrans:
        case token_NEq:
        case token_Pow:
        case token_RParen:
        case token_Sub:
        case token_Trans:
            // reduce
            return call_0_MakeNCTrans(Nonterminal_PostfixExpr, /*pop*/ 2, 0);
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_55(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_56(token_type token, const value_type& value) {
        switch(token) {
        case token_LParen:
            // shift
            push_stack(/*state*/ 2, value);
            return false;
        case token_eof:
        case token_Add:
        case token_ArrayDiv:
        case token_ArrayMul:
        case token_ArrayPow:
        case token_BitAnd:
        case token_BitOr:
        case token_Comma:
        case token_Div:
        case token_Eq:
        case token_GE:
        case token_GT:
        case token_LE:
        case token_LT:
        case token_Mul:
        case token_NCTrans:
        case token_NEq:
        case token_Pow:
        case token_RParen:
        case token_Sub:
        case token_Trans:
            // reduce
            return call_0_MakeIdentifier(Nonterminal_PrimaryExpr, /*pop*/ 1, 0);
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_56(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_57(token_type token, const value_type& value) {
        switch(token) {
        case token_Comma:
            // shift
            push_stack(/*state*/ 3, value);
            return false;
        case token_RParen:
            // shift
            push_stack(/*state*/ 58, value);
            return false;
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_57(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_58(token_type token, const value_type& value) {
        switch(token) {
        case token_eof:
        case token_Add:
        case token_ArrayDiv:
        case token_ArrayMul:
        case token_ArrayPow:
        case token_BitAnd:
        case token_BitOr:
        case token_Comma:
        case token_Div:
        case token_Eq:
        case token_GE:
        case token_GT:
        case token_LE:
        case token_LT:
        case token_Mul:
        case token_NCTrans:
        case token_NEq:
        case token_Pow:
        case token_RParen:
        case token_Sub:
        case token_Trans:
            // reduce
            return call_0_MakeCall(Nonterminal_CallExpr, /*pop*/ 4, 0, 2);
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_58(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_59(token_type token, const value_type& value) {
        switch(token) {
        case token_Comma:
        case token_RParen:
            // reduce
            return call_0_DoNothing(Nonterminal_ArgListExpr, /*pop*/ 1, 0);
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_59(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_60(token_type token, const value_type& value) {
        switch(token) {
        case token_Comma:
        case token_RParen:
            // reduce
            return call_0_MakeArgList(Nonterminal_ArgListExpr, /*pop*/ 3, 0, 2);
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_60(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_61(token_type token, const value_type& value) {
        switch(token) {
        case token_eof:
        case token_Add:
        case token_ArrayDiv:
        case token_ArrayMul:
        case token_ArrayPow:
        case token_BitAnd:
        case token_BitOr:
        case token_Comma:
        case token_Div:
        case token_Eq:
        case token_GE:
        case token_GT:
        case token_LE:
        case token_LT:
        case token_Mul:
        case token_NCTrans:
        case token_NEq:
        case token_Pow:
        case token_RParen:
        case token_Sub:
        case token_Trans:
            // reduce
            return call_0_MakeConstant(Nonterminal_PrimaryExpr, /*pop*/ 1, 0);
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_61(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    bool state_62(token_type token, const value_type& value) {
        switch(token) {
        case token_eof:
        case token_Add:
        case token_ArrayDiv:
        case token_ArrayMul:
        case token_ArrayPow:
        case token_BitAnd:
        case token_BitOr:
        case token_Comma:
        case token_Div:
        case token_Eq:
        case token_GE:
        case token_GT:
        case token_LE:
        case token_LT:
        case token_Mul:
        case token_NCTrans:
        case token_NEq:
        case token_Pow:
        case token_RParen:
        case token_Sub:
        case token_Trans:
            // reduce
            return call_0_MakeParenExpr(Nonterminal_PrimaryExpr, /*pop*/ 3, 1);
        default:
            sa_.syntax_error();
            error_ = true;
            return false;
        }
    }

    int gotof_62(Nonterminal nonterminal) {
        assert(0);
        return true;
    }

    const table_entry* entry(int n) const {
        static const table_entry entries[] = {
            { &Parser::state_0, &Parser::gotof_0, false },
            { &Parser::state_1, &Parser::gotof_1, false },
            { &Parser::state_2, &Parser::gotof_2, false },
            { &Parser::state_3, &Parser::gotof_3, false },
            { &Parser::state_4, &Parser::gotof_4, false },
            { &Parser::state_5, &Parser::gotof_5, false },
            { &Parser::state_6, &Parser::gotof_6, false },
            { &Parser::state_7, &Parser::gotof_7, false },
            { &Parser::state_8, &Parser::gotof_8, false },
            { &Parser::state_9, &Parser::gotof_9, false },
            { &Parser::state_10, &Parser::gotof_10, false },
            { &Parser::state_11, &Parser::gotof_11, false },
            { &Parser::state_12, &Parser::gotof_12, false },
            { &Parser::state_13, &Parser::gotof_13, false },
            { &Parser::state_14, &Parser::gotof_14, false },
            { &Parser::state_15, &Parser::gotof_15, false },
            { &Parser::state_16, &Parser::gotof_16, false },
            { &Parser::state_17, &Parser::gotof_17, false },
            { &Parser::state_18, &Parser::gotof_18, false },
            { &Parser::state_19, &Parser::gotof_19, false },
            { &Parser::state_20, &Parser::gotof_20, false },
            { &Parser::state_21, &Parser::gotof_21, false },
            { &Parser::state_22, &Parser::gotof_22, false },
            { &Parser::state_23, &Parser::gotof_23, false },
            { &Parser::state_24, &Parser::gotof_24, false },
            { &Parser::state_25, &Parser::gotof_25, false },
            { &Parser::state_26, &Parser::gotof_26, false },
            { &Parser::state_27, &Parser::gotof_27, false },
            { &Parser::state_28, &Parser::gotof_28, false },
            { &Parser::state_29, &Parser::gotof_29, false },
            { &Parser::state_30, &Parser::gotof_30, false },
            { &Parser::state_31, &Parser::gotof_31, false },
            { &Parser::state_32, &Parser::gotof_32, false },
            { &Parser::state_33, &Parser::gotof_33, false },
            { &Parser::state_34, &Parser::gotof_34, false },
            { &Parser::state_35, &Parser::gotof_35, false },
            { &Parser::state_36, &Parser::gotof_36, false },
            { &Parser::state_37, &Parser::gotof_37, false },
            { &Parser::state_38, &Parser::gotof_38, false },
            { &Parser::state_39, &Parser::gotof_39, false },
            { &Parser::state_40, &Parser::gotof_40, false },
            { &Parser::state_41, &Parser::gotof_41, false },
            { &Parser::state_42, &Parser::gotof_42, false },
            { &Parser::state_43, &Parser::gotof_43, false },
            { &Parser::state_44, &Parser::gotof_44, false },
            { &Parser::state_45, &Parser::gotof_45, false },
            { &Parser::state_46, &Parser::gotof_46, false },
            { &Parser::state_47, &Parser::gotof_47, false },
            { &Parser::state_48, &Parser::gotof_48, false },
            { &Parser::state_49, &Parser::gotof_49, false },
            { &Parser::state_50, &Parser::gotof_50, false },
            { &Parser::state_51, &Parser::gotof_51, false },
            { &Parser::state_52, &Parser::gotof_52, false },
            { &Parser::state_53, &Parser::gotof_53, false },
            { &Parser::state_54, &Parser::gotof_54, false },
            { &Parser::state_55, &Parser::gotof_55, false },
            { &Parser::state_56, &Parser::gotof_56, false },
            { &Parser::state_57, &Parser::gotof_57, false },
            { &Parser::state_58, &Parser::gotof_58, false },
            { &Parser::state_59, &Parser::gotof_59, false },
            { &Parser::state_60, &Parser::gotof_60, false },
            { &Parser::state_61, &Parser::gotof_61, false },
            { &Parser::state_62, &Parser::gotof_62, false },
        };
        return &entries[n];
    }

};

} // namespace matlab_parser

#endif // #ifndef MATLAB_PARSER_HPP_

